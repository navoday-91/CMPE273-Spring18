# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import drone_pb2 as drone__pb2


class DroneControlStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.movement = channel.stream_stream(
        '/DroneControl/movement',
        request_serializer=drone__pb2.Request.SerializeToString,
        response_deserializer=drone__pb2.Response.FromString,
        )
    self.adjust = channel.unary_stream(
        '/DroneControl/adjust',
        request_serializer=drone__pb2.Request.SerializeToString,
        response_deserializer=drone__pb2.Response.FromString,
        )


class DroneControlServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def movement(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def adjust(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DroneControlServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'movement': grpc.stream_stream_rpc_method_handler(
          servicer.movement,
          request_deserializer=drone__pb2.Request.FromString,
          response_serializer=drone__pb2.Response.SerializeToString,
      ),
      'adjust': grpc.unary_stream_rpc_method_handler(
          servicer.adjust,
          request_deserializer=drone__pb2.Request.FromString,
          response_serializer=drone__pb2.Response.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'DroneControl', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
